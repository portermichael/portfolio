[
  {
    "title": "What is it?",
    "linkedUrl": "https://www.github.com",
    "createdDate": "2015-10-05",
    "lastEditedDate": "2015-11-05",
    "category": "Github",
    "articleContent": "<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p><p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<p> It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
  },
  {
    "title": "Why do we use it?",
    "linkedUrl": "https://www.github.com",
    "createdDate": "2015-10-04",
    "lastEditedDate": "2015-11-04",
    "category": "Github",
    "articleContent": "<p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.</p><p>The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English.<p> Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like)."
  },
  {
    "title": "Where does it come from?",
    "linkedUrl": "",
    "createdDate": "2015-10-02",
    "lastEditedDate": "2015-11-06",
    "category": "Blog",
    "articleContent": "<p>Contrary to popular belief, Lorem Ipsum is not simply random text.</p><p>It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source.<p> Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32."
  },
  {
    "title": "Where can I get some?",
    "linkedUrl": "https://www.github.com",
    "createdDate": "2015-10-02",
    "lastEditedDate": "2015-11-02",
    "category": "Github",
    "articleContent": "<p>There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.</p><p> If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet.<p> It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc."
  },
  {
    "title": "Why Create a Technical Blog",
    "linkedUrl": "",
    "createdDate": "2016-05-23",
    "lastEditedDate": "2016-07-19",
    "category": "Blog",
    "language": "Ruby",
    "articleContent": "<p>When I first started developing I did not see the point in a blog. But, when I started learning beyond the basics and troubleshooting through google, or checking out alternative techniques, I often ran into blogs for potential solutions and thought pieces. Most of the time, I was not receiving an expansive guide, or a lot of code, but they were almost always a great starting point.  A technical blog I often ran into in my early days was joshsoftware.com</p></br><p>Even after running into technical blogs I figured these were just folks with years of experience; a blog is for someone in their fifth year programming who wants to give back to the community. Why should I extend the extra effort while I am still learning? Could I even put out anything decent? There are already posts on polymorphic associates and guides, why would it be helpful if I wrote one?</p></br><h4>Professional Uses</h4></br><p>When I started exploring software positions, I began seeing preferences towards individuals with personal websites and blogs. Obviously an employer wants overachievers. Software posts often call for folks who enjoy programming in their offtime. We should maintain a good work life balance, but a great employee is involved in their work and does thinks about their field in their time off.</p></br><p>A blog can also be a....</p></br><h4>Good Skills Measuring Stick</h4></br><p>A technical blog demonstrates a certain level of technical competence. If we start early enough and consistently a techincal blog can be an accurate measuring stick of skills. A sort of checkbox of abilities.</p></br><p>It is true what they say. You do not really understand something unless you can explain it to someone else. So get out there and write posts on the concepts you already know, or even write out the concepts you do not know to find your faults. Worst case scenario, if you want to review something, you can fall back on your own personal body of work and see it again in your own words.</p></br><p>Everyone with a technical blog is just like you and me. They took the intiative at some point, and their skills grew with them to the extent that now we can all use their posts and a resource for our own growth.</p>"
  },
  {
    "title": "Benefits of Jekyll in Static Apps",
    "linkedUrl": "",
    "createdDate": "2016-05-23",
    "lastEditedDate": "2016-07-19",
    "category": "Blog",
    "language": "Ruby",
    "articleContent": "<p>Jekyll is a static site generator written in Ruby. That means you can use it for blogs, business websites and anything else you can imagine that mostly doesn't require a database. It takes dynamic content like templates and markdown and assembles that content into a static application. The assembled static application is what gets put on the web. Using this method we can take advantage of paradigms in programming<sup>1</sup> to easily and rapidly make changes to our application.</p></br><h4>The Pros</h4></br><p>Jekyll is pitched and touted as being very minimalistic and very efficient. It has only what you need to generate a basic static site. Everything else you have add via plugins. The benefits to this approach are that Jekyll is very fast, very secure and very cheap right out of the box<sup>2</sup>. Additionally, because it's so simple, it's fairly easy to optimize code for speed and efficiency.</p></br><p>If you need log-in, extensive commenting, photo hosting or hosting any type of data you should definitely move out of Jekyll and into a webapp framework that supports databases like Ruby on Rails, PHP, or Python to name a new.</p></br><h4>The Cons</h4></br><p>I consider these inconveniences inherent in the type of framework Jekyll is, but with enough inconveniences, we get a bit unhappy.</p></br><p>Photos and media have to be inserted manually. With some sites like Wordpress, there is a nice interface to easily add this kind of data. Jekyll doesn't have that, so if we've got a dozen photos per post, it might be a good idea to consider switching.</p></br><p>SEO optimization generally has to be done manually. SEO optimization gets webapp pages hitting higher on unpaid search results. There are a lot of factors to take into consideration, but generally optimization relies on good keywords, inter-application cross-linking and easy social network sharing. There are some Jekyll plug ins that help, but I don't use them. For me, this is more of a personal body of work blog, and I don't think it would be an optimal use of my time.</p></br><p>Jekyll only works on computers where you are 'set-up'. So if you've got a laptop you do most of your work on, and a light weight underpowered mini-laptop for traveling, you would likely find it difficult to update or edit your website on the road.</p></br><h4>The Competition</h4></br><h4>Wordpress</h4></br><p>Today, the biggest webapp framework is definitely Wordpress. A lot of folks knock it for it's resource use, but it's huge strength is in it's interface. Anyone can easily create a website on wordpress with virtually no programming knowledge. Additionally, the more difficult to do things like handling database log-ins and tarnsactions can be done with plugins. It's really easy to use and you can find a TON of sites that use Wordpress like The New York Times.</p></br><p>Wordpress works out of a browser and it has a simple editing system, but it is slower. It's also more prone to crashes and MUST be continuously updated. Security holes in plugins are constantly being found and updated. Because of these security holes, and popularity there is also got a malware situation. Malware might get inserted into your site if you aren't constantly updating, and then you might run into anti-viruses programs warning users of your site, loss of users trust and possibly SEO de-optimization<sup>3</sup>.</p></br><h4>Alternative Popular Static Site Generators</h4></br><p>Middleman - Also built in Ruby, but smaller than Jekyll. Some major websites use Middleman and if it works for them it can work for us.</p></br><p>Roots - Node.js based, built by Carrot which is a subsidiary of the Vice Media Group.</p></br><p>Hugo - Written in GO. I've been hearing a lot of love for Hugo, but it might be because it's the new kid on the block.</p></br><p>If you are having trouble choosing a Static Site Generator and don't don't have any coding experience I'd just pick Jekyll or Wordpress. It's more important to get started and work through the fundamentals, than spending significant time researching for very small gains. The larger frameworks also have more tutorials, guides, plug-ins and overall resources at your disposal.</p></br><p>If you do have skill in Node.js, GO or another language you should definitely use the static site generator in that language. With a quick google search you can find a framework that supports your language of choice. Additionally, you shouldn't have any trouble finding tutorials to get you started.</p></br><h4>Footnotes:</h4></br><p>1. Paradigms include things like DRY - Don't repeat yourself. If you are repeating yourself over several sections, and you decide to make a change, you now have to make this change over several sections. This is both error prone (typos) and time consuming.</p></br><p>2. Because we have no communication between databases we are fast. We are just pulling up already prepared data quickly. Jekyll comes out of the box without plugins, which may be a source of continuous updating to patch security holes. Additionally, because Jekyll is already prepared when it's hosted, there isn't much to change. It's often the ability to be dynamic that presents security holes. With no databse, Jekyll is small and light. That means cheap. It also means we aren't sending a lot of data. That also means cheap. Cheap on space and cheap on sending data = very cheap.</p></br><p>3. SEO optimization is sort of like a hidden black box. Search engines don't publicly say all the ways they use to choose site rankings, but they tell us some of them and we get an impression of others. It's a likely case that sites with security warnings, suffer de-ranks, but it's unclear how severe those security issues have to be or how long.</p>"
  }
]
